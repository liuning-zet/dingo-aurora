---
- name: Configure /etc/hosts
  import_tasks: 0090-etchosts.yml
  tags:
    - bootstrap-os
    - etchosts
# Disable swap
- name: Disable swap
  import_tasks: 0010-swapoff.yml
  when:
    - not dns_late
    - kubelet_fail_swap_on

- name: Set facts
  import_tasks: 0020-set_facts.yml
  tags:
    - resolvconf
    - facts

- name: Check settings
  import_tasks: 0040-verify-settings.yml
  when:
    - not dns_late
  tags:
    - asserts

- name: Create directories
  import_tasks: 0050-create_directories.yml
  when:
    - not dns_late

- name: Apply resolvconf settings
  import_tasks: 0060-resolvconf.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - systemd_resolved_enabled.rc != 0
    - networkmanager_enabled.rc != 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Apply systemd-resolved settings
  import_tasks: 0061-systemd-resolved.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - systemd_resolved_enabled.rc == 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Apply networkmanager unmanaged devices settings
  import_tasks: 0062-networkmanager-unmanaged-devices.yml
  when:
    - networkmanager_enabled.rc == 0
  tags:
    - bootstrap-os

- name: Apply networkmanager DNS settings
  import_tasks: 0063-networkmanager-dns.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - networkmanager_enabled.rc == 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Install required system packages
  import_tasks: 0070-system-packages.yml
  when:
    - not dns_late
  tags:
    - bootstrap-os
    - system-packages

- name: Apply system configurations
  import_tasks: 0080-system-configurations.yml
  when:
    - not dns_late
  tags:
    - bootstrap-os

- name: Configure NTP
  import_tasks: 0081-ntp-configurations.yml
  when:
    - not dns_late
    - ntp_enabled
  tags:
    - bootstrap-os

- name: Configure /etc/hosts
  import_tasks: 0090-etchosts.yml
  tags:
    - bootstrap-os
    - etchosts
- name: Containerd | Generate default base_runtime_spec
  register: ctr_oci_spec
  command: "ctr oci spec"
  check_mode: false
  changed_when: false

- name: Containerd | Store generated default base_runtime_spec
  set_fact:
    containerd_default_base_runtime_spec: "{{ ctr_oci_spec.stdout | from_json }}"
    

- name: Containerd | Write base_runtime_specs
  copy:
    content: "{{ item.value }}"
    dest: "{{ containerd_cfg_dir }}/{{ item.key }}"
    owner: "root"
    mode: "0644"
  with_dict: "{{ containerd_base_runtime_specs | default({}) }}"
  notify: Restart containerd

- name: Containerd | Copy containerd config file
  template:
    src: config.toml.j2
    dest: "{{ containerd_cfg_dir }}/config.toml"
    owner: "root"
    mode: "0640"
  notify: Restart containerd

- name: Containerd | Configure containerd registries
  block:
    - name: Containerd | Create registry directories
      file:
        path: "{{ containerd_cfg_dir }}/certs.d/{{ item.prefix }}"
        state: directory
        mode: "0755"
      loop: "{{ containerd_registries_mirrors }}"
    - name: Containerd | Write hosts.toml file
      template:
        src: hosts.toml.j2
        dest: "{{ containerd_cfg_dir }}/certs.d/{{ item.prefix }}/hosts.toml"
        mode: "0640"
      loop: "{{ containerd_registries_mirrors }}"

- name: Configure dhclient
  import_tasks: 0100-dhclient-hooks.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - dhclientconffile is defined
    - not ansible_os_family in ["Flatcar", "Flatcar Container Linux by Kinvolk"]
  tags:
    - bootstrap-os
    - resolvconf

- name: Configure dhclient dhclient hooks
  import_tasks: 0110-dhclient-hooks-undo.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode != 'host_resolvconf'
    - dhclientconffile is defined
    - not ansible_os_family in ["Flatcar", "Flatcar Container Linux by Kinvolk"]
  tags:
    - bootstrap-os
    - resolvconf

# We need to make sure the network is restarted early enough so that docker can later pick up the correct system
# nameservers and search domains
- name: Flush handlers
  meta: flush_handlers

- name: Run calico checks
  include_role:
    name: network_plugin/calico
    tasks_from: check
  when:
    - kube_network_plugin == 'calico'
    - not ignore_assert_errors
    - not (hosted_k8s | default(false))

- name: Add nameservers block to the beginning of resolv.conf
  blockinfile:
    path: /etc/resolv.conf
    block: |-
      {% for nameserver in nameservers %}
      nameserver {{ nameserver }}
      {% endfor %}
    state: present
    insertbefore: BOF
    create: true
    backup: true
    marker: "# Custom nameservers {mark}"
    mode: "0644"
  run_once: false
  delegate_to: "{{ inventory_hostname }}"
